# Nginx configuration for gradual frontend migration
# This proxy can route traffic between React and Simple frontends

# Upstream definitions
upstream react_frontend {
    server frontend:3000;
}

upstream simple_frontend {
    server frontend-simple:80;
}

upstream backend_api {
    server backend:8000;
}

# Map to determine which frontend to use based on various criteria
map $cookie_frontend_version $frontend_choice {
    default "react";      # Default to React
    "simple" "simple";    # If cookie is set to simple, use simple frontend
    "react" "react";      # Explicit react choice
}

# Alternative: Route based on percentage (for gradual rollout)
# split_clients "${remote_addr}${http_user_agent}${date_gmt}" $frontend_split {
#     10%    "simple";   # 10% of traffic to simple frontend
#     *      "react";    # 90% to React frontend
# }

server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frontend-Version $frontend_choice always;  # Debug header
    
    # Client max body size for file uploads
    client_max_body_size 250M;
    
    # Health check endpoint (doesn't go through frontend)
    location /health {
        access_log off;
        return 200 "Migration proxy healthy\n";
        add_header Content-Type text/plain;
    }
    
    # API proxy (same for both frontends)
    location /api/ {
        proxy_pass http://backend_api;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # SSE and WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_buffering off;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;
    }
    
    # Special endpoints for testing
    location = /set-frontend {
        # Allow setting frontend preference via query parameter
        if ($arg_version = "simple") {
            add_header Set-Cookie "frontend_version=simple; Path=/; Max-Age=86400";
            return 302 /;
        }
        if ($arg_version = "react") {
            add_header Set-Cookie "frontend_version=react; Path=/; Max-Age=86400";
            return 302 /;
        }
        return 400 "Invalid version parameter. Use ?version=simple or ?version=react";
    }
    
    # Route to appropriate frontend based on choice
    location / {
        # Use cookie-based routing
        if ($frontend_choice = "simple") {
            proxy_pass http://simple_frontend;
        }
        if ($frontend_choice = "react") {
            proxy_pass http://react_frontend;
        }
        
        # Alternative: Use percentage-based routing
        # if ($frontend_split = "simple") {
        #     proxy_pass http://simple_frontend;
        # }
        # if ($frontend_split = "react") {
        #     proxy_pass http://react_frontend;
        # }
        
        # Common proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # For React dev server WebSocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Specific handling for simple frontend static files
    location ~ ^/(css|js|assets|images)/ {
        # Always serve static files from simple frontend
        proxy_pass http://simple_frontend;
        proxy_set_header Host $host;
        
        # Cache static assets
        proxy_cache_valid 200 1h;
        add_header X-Cache-Status $upstream_cache_status;
    }
}