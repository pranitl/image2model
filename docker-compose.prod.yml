# Production configuration - Docker Compose v2+ ignores version field

services:
  # PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    container_name: image2model-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-image2model}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - image2model-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Redis for Celery with persistence
  redis:
    image: redis:7-alpine
    container_name: image2model-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_prod:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - image2model-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # FastAPI backend for production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: image2model-backend-prod
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-image2model}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-http://localhost:3000}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - FAL_KEY_ID=${FAL_KEY_ID}
      - FAL_KEY_SECRET=${FAL_KEY_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
    volumes:
      - backend_uploads_prod:/app/uploads
      - backend_results_prod:/app/results
      - backend_models_prod:/app/models
      - backend_logs_prod:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4 --worker-class uvicorn.workers.UvicornWorker
    networks:
      - image2model-network
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'

  # Celery worker for background tasks
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: image2model-worker-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-image2model}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - FAL_KEY_ID=${FAL_KEY_ID}
      - FAL_KEY_SECRET=${FAL_KEY_SECRET}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
    volumes:
      - backend_uploads_prod:/app/uploads
      - backend_results_prod:/app/results
      - backend_models_prod:/app/models
      - backend_logs_prod:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=${WORKER_CONCURRENCY:-4} --max-tasks-per-child=1000
    networks:
      - image2model-network
    restart: always
    healthcheck:
      test: ["CMD", "celery", "-A", "app.workers.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '4.0'
        reservations:
          memory: 1G
          cpus: '2.0'

  # Celery beat scheduler
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: image2model-beat-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-image2model}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - backend_logs_prod:/app/logs
      - celery_beat_schedule:/app/celerybeat-schedule
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.workers.celery_app beat --loglevel=info --pidfile=/tmp/celerybeat.pid
    networks:
      - image2model-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Celery monitoring (optional for production)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: image2model-flower-prod
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH:-admin:admin}
    depends_on:
      - redis
      - worker
    command: celery -A app.workers.celery_app flower --port=5555 --basic_auth=${FLOWER_BASIC_AUTH:-admin:admin}
    networks:
      - image2model-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # React frontend served by Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: image2model-frontend-prod
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${FRONTEND_SSL_PORT:-443}:443"
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
      - BACKEND_HOST=${BACKEND_HOST:-backend}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/templates/default.conf.template:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro  # For SSL certificates
    depends_on:
      - backend
    networks:
      - image2model-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Nginx reverse proxy (optional for more complex setups)
  nginx-proxy:
    image: nginx:alpine
    container_name: image2model-nginx-proxy-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/proxy.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - image2model-network
    restart: always
    profiles:
      - proxy  # Only start with --profile proxy

networks:
  image2model-network:
    driver: bridge
    name: image2model-network-prod

volumes:
  postgres_data_prod:
    name: image2model-postgres-data-prod
    driver: local
  redis_data_prod:
    name: image2model-redis-data-prod
    driver: local
  backend_uploads_prod:
    name: image2model-backend-uploads-prod
    driver: local
  backend_results_prod:
    name: image2model-backend-results-prod
    driver: local
  backend_models_prod:
    name: image2model-backend-models-prod
    driver: local
  backend_logs_prod:
    name: image2model-backend-logs-prod
    driver: local
  celery_beat_schedule:
    name: image2model-celery-beat-schedule-prod
    driver: local