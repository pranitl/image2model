# Production Docker Compose Configuration
# Usage: docker compose -f docker-compose.prod.yml --env-file .env.production up -d

services:
  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: image2model-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    # No exposed ports for security - access via Docker network only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped

  # Redis for Celery with authentication
  redis:
    image: redis:7-alpine
    container_name: image2model-redis
    command: >
      sh -c "
        mkdir -p /usr/local/etc/redis &&
        echo 'requirepass ${REDIS_PASSWORD}' > /usr/local/etc/redis/redis.conf &&
        echo 'bind 127.0.0.1 ::1' >> /usr/local/etc/redis/redis.conf &&
        redis-server /usr/local/etc/redis/redis.conf
      "
    # No exposed ports for security
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped

  # FastAPI backend
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: production
    container_name: image2model-backend
    # Only expose to nginx, not host
    expose:
      - "8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - FAL_API_KEY=${FAL_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - API_KEY=${API_KEY}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE}
      - RATE_LIMIT_PER_HOUR=${RATE_LIMIT_PER_HOUR}
    volumes:
      - backend_uploads:/app/uploads
      - backend_results:/app/results
      - backend_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --access-logfile - --error-logfile -
    networks:
      - backend-network
      - frontend-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: production
    container_name: image2model-worker
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - FAL_API_KEY=${FAL_API_KEY}
    volumes:
      - backend_uploads:/app/uploads
      - backend_results:/app/results
      - backend_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4 -Q default,batch_processing,model_generation,maintenance,priority --max-tasks-per-child=50
    networks:
      - backend-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Celery worker dedicated to model generation
  worker-model:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: production
    container_name: image2model-worker-model
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - FAL_API_KEY=${FAL_API_KEY}
    volumes:
      - backend_uploads:/app/uploads
      - backend_results:/app/results
      - backend_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=3 -Q model_generation --max-tasks-per-child=20 -n worker-model@%h
    networks:
      - backend-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 3G

  # Celery monitoring (protected with auth)
  flower:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: production
    container_name: image2model-flower
    # Only expose to nginx
    expose:
      - "5555"
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    depends_on:
      - redis
      - worker
    command: celery -A app.core.celery_app flower --port=5555 --basic_auth=${FLOWER_BASIC_AUTH}
    networks:
      - backend-network
      - frontend-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: image2model-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - frontend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (SvelteKit application)
  frontend:
    build:
      context: ./frontend-svelte
      dockerfile: Dockerfile
      target: production
    container_name: image2model-frontend
    # Expose port 3000 internally
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - HOST=0.0.0.0
      - PORT=3000
      - ORIGIN=https://image2model.pranitlab.com
      - API_KEY=${API_KEY}
      - PUBLIC_API_URL=https://image2model.pranitlab.com/api/v1
    networks:
      - frontend-network
    restart: unless-stopped
    command: node build
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  frontend-network:
    driver: bridge
    name: image2model-frontend-network
  backend-network:
    driver: bridge
    internal: true  # No external access
    name: image2model-backend-network

volumes:
  postgres_data:
    name: image2model-postgres-data
  redis_data:
    name: image2model-redis-data
  backend_uploads:
    name: image2model-backend-uploads
  backend_results:
    name: image2model-backend-results
  backend_models:
    name: image2model-backend-models
  nginx_logs:
    name: image2model-nginx-logs