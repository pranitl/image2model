# Simplified docker-compose for testing frontend-simple
# This replaces the React frontend with the simple frontend

services:
  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: image2model-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: image2model
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - image2model-network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: image2model-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - image2model-network

  # FastAPI backend
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: production
    container_name: image2model-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/image2model
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - BACKEND_CORS_ORIGINS=http://localhost:3000
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - FAL_API_KEY=e593280a-4735-4bb4-aa97-d16b985f10ac:312ea938c7a73ff88f8ba4a0b0d866cb
    volumes:
      - ./backend:/app:delegated
      - backend_uploads:/app/uploads
      - backend_results:/app/results
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - image2model-network

  # Celery worker
  worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: production
    container_name: image2model-worker
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/image2model
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
    volumes:
      - ./backend:/app:delegated
      - backend_uploads:/app/uploads
      - backend_results:/app/results
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2
    networks:
      - image2model-network

  # Simple Frontend - THE ONLY FRONTEND NOW
  frontend:
    build:
      context: ./frontend-simple
      dockerfile: Dockerfile
    container_name: image2model-frontend
    ports:
      - "3000:80"  # Using the same port as before
    depends_on:
      - backend
    networks:
      - image2model-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  image2model-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
  backend_results: